global int $rootTransformIndex;

global proc tenlize(){
	global int $rootIndex;
	global int $rootTransformIndex;
	string $selectedItems[] = `ls -sl -dag`;
	int $numItems = size($selectedItems);
	if ($numItems<2)
    		error "Please select atleast one shape or transform node in order to run the command";
	else
	{
		print($numItems);
		int $i = 0;
		int $j = 0;
		for( $i=0; $i < size($selectedItems); $i = $i+2)
		{
			$j = $i+1;
			string $nodeT = $selectedItems[$i];
			string $nodeS = $selectedItems[$j];
			string $outputT = `createNode transform`; // new transform node node used to display the output from tetgen
			string $outputS = `createNode mesh`; // new mesh (shape) node used to display the output from tetgen

			if($nodeT=="instancing"+$rootIndex) $rootTransformIndex=$i/2+1;

			parent -s -relative $outputS $outputT;
			sets -add initialShadingGroup $outputS;
			string $tetgenNode = `createNode LSTetgenNode`;
			connectAttr ($nodeS+".outMesh") ($tetgenNode+".inputMesh");
			connectAttr ($nodeT+".worldMatrix[0]") ($tetgenNode+".wm");
			connectAttr ($tetgenNode+".outputMesh") ($outputS+".inMesh");
			/*string $fileName = "G:\\tetgenOutput"; // optional output to file option for the user to save the tetrahedralized geometry
			setAttr ($tetgenNode+".ofp") -type "string" $fileName;*/
		}
		hide -all;
		for($i=0;$i<size($selectedItems)/2;++$i){
			string $com="select transform"+($i+1)+";";
			eval($com);
			showHidden -above;
		}
	}
}